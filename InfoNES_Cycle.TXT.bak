void InfoNES_Cycle()
{
/*
 *  The loop of emulation
 *
 */

  // Set the PPU adress to the buffered value
  if ( ( PPU_R1 & R1_SHOW_SP ) || ( PPU_R1 & R1_SHOW_SCR ) )
		PPU_Addr = PPU_Temp;

  // Emulation loop
  for (;;)
  {    
    int nStep;
      
    //SCAN_TOP_OFF_SCREEN:
      // Reset a PPU status
      PPU_R2 = 0;

      // Set up a character data
      if ( NesHeader.byVRomSize == 0 && FrameCnt == 0 )
        InfoNES_SetupChr();

      // Get position of sprite #0
      InfoNES_GetSprHitY();

    // Set a flag if a scanning line is a hit in the sprite #0
    if ( SpriteJustHit < SCAN_UNKNOWN_START )
    {
      // # of Steps to execute before sprite #0 hit
      nStep = SpriteJustHit * STEP_PER_SCANLINE + SPRRAM[ SPR_X ] * STEP_PER_SCANLINE / NES_DISP_WIDTH;

      // Execute instructions
      K6502_Step( nStep );

      // Set a sprite hit flag
      if ( ( PPU_R1 & R1_SHOW_SP ) && ( PPU_R1 & R1_SHOW_SCR ) )
        PPU_R2 |= R2_HIT_SP;

      // NMI is required if there is necessity
      if ( ( PPU_R0 & R0_NMI_SP ) && ( PPU_R1 & R1_SHOW_SP ) )
        NMI_REQ;//经过部分游戏测试，这一段代码好像没有必要。

      // Execute instructions
      K6502_Step( STEP_PER_SCANLINE * SCAN_UNKNOWN_START - nStep );
    }
    else
    {
      // Execute instructions
      K6502_Step( STEP_PER_SCANLINE * SCAN_UNKNOWN_START );
    }

    // SCAN_VBLANK_START:
      // FrameCnt + 1
      FrameCnt = ( FrameCnt >= FrameSkip ) ? 0 : FrameCnt + 1;

      // Set a V-Blank flag
      PPU_R2 = R2_IN_VBLANK;

      // Reset latch flag
      PPU_Latch_Flag = 0;

      // pAPU Sound function in V-Sync
      if ( !APU_Mute )
        InfoNES_pAPUVsync();

      // A mapper function in V-Sync
      MapperVSync();

      // Get the condition of the joypad
      InfoNES_PadState( &PAD1_Latch, &PAD2_Latch, &PAD_System );
      
      // NMI on V-Blank
      if ( PPU_R0 & R0_NMI_VB )
        NMI_REQ;

      // Exit an emulation if a QUIT button is pushed
      if ( PAD_PUSH( PAD_System, PAD_SYS_QUIT ) )
        return;  // Exit an emulation      

      // Execute instructions
      K6502_Step( STEP_PER_SCANLINE * 22 );

  /*-------------------------------------------------------------------*/
  /*  Refresh screen                                                   */
  /*-------------------------------------------------------------------*/
  if ( FrameCnt == 0 )
  {
        // Render 240 scanlines
    for( PPU_Scanline = 0; PPU_Scanline < 240; PPU_Scanline++ )
    	  InfoNES_DrawLine();
        
        // Transfer the contents of work frame on the screen
        InfoNES_LoadFrame();
  }

  /*-------------------------------------------------------------------*/
  /*  Set new scroll values                                            */
  /*-------------------------------------------------------------------*/
  PPU_Scr_V      = PPU_Scr_V_Next;
  PPU_Scr_V_Byte = PPU_Scr_V_Byte_Next;
  PPU_Scr_V_Bit  = PPU_Scr_V_Bit_Next;

  PPU_Scr_H      = PPU_Scr_H_Next;
  PPU_Scr_H_Byte = PPU_Scr_H_Byte_Next;
  PPU_Scr_H_Bit  = PPU_Scr_H_Bit_Next;

    // Frame IRQ in V-Sync
    if ( FrameIRQ_Enable )
    {
      IRQ_REQ;
      APU_Reg[ 0x4015 ] |= 0x40;
    }
  }
}